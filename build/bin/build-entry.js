/*
 * @Description: 此文件主要用于自动生成 src/index.js 文件，用于自动引入所有组件,
 * 增删组件时，可自动
 * @Author: arrow
 * @Date: 2020-08-07 11:34:22
 * @LastEditors: Please set LastEditors
 * @LastEditTime: 2020-08-11 11:20:13
 */


// 引入 components.json 文件
let Components = require('../../components.json');
const fs = require('fs');
// json-templater 将双大括号替换成 json 内部的数据
const render = require('json-templater/string');
// 转换命名的  是否使用取决于前端服务 目前暂不使用
// 因为在 import 时不能存在连字符（一般大写，因此，使用）
const uppercamelcase = require('uppercamelcase');
const path = require('path');
// 末尾符
const endOfLine = require('os').EOL;
// 文件生成的位置
const OUTPUT_PATH = path.join(__dirname, '../../src/index.js');
// import 模板
const IMPORT_TEMPLATE = 'import {{name}} from \'{{path}}\';';
// 安装的组件名字
const INSTALL_COMPONENT_TEMPLATE = '  {{name}}';
// index.js 的主模板
const MAIN_TEMPLATE = `/* Automatically generated by './build/bin/build-entry.js' */
// 内部组件
{{include}}

// 内部指令 这里的代码很乱，希望有机会能够更改
// import directives from './directives/index.js'
// import './utils/prototype.js'

// 第三方工具库
import _ from 'lodash'
import Plyr from 'plyr'

// 内部工具
import VueClipboard from 'vue-clipboard2'

// 样式文件
import 'plyr/dist/plyr.css'

import "./assets/iconfont/iconfont.js";
import "./assets/reset/index.scss";

const components = [
{{install}},
];

const utils = [
  Confirm,
  Alert,
  VueClipboard
]

const install = function(Vue, opts = {}) {
  
  Object.keys(directives).forEach(k => {
    Vue.directive(k, directives[k])
  });

  components.forEach(component => {
    Vue.component(component.name, component);
  });
  
  utils.forEach(util => {
    Vue.use(util);
  });

  Vue.prototype._ = _
};

window.Plyr = Plyr

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
}

export default {
  version: '{{version}}',
  install,
{{list}}
};
`;

delete Components.font;

const ComponentNames = Object.keys(Components);
// 引入的组件
let includeComponentTemplate = [];
// 非插件类型的组件进行install
// 插件类型的组件需要 use, 不在install中
let installTemplate = [];
// exportList
let listTemplate = [];

ComponentNames.forEach(name => {
  let componentName = uppercamelcase(name);

  includeComponentTemplate.push(render(IMPORT_TEMPLATE, {
    name: componentName,
    path: Components[name]
  }));

  if (['Alert', 'Confirm', 'Notification', 'Message', 'InfiniteScroll'].indexOf(componentName) === -1) {
    installTemplate.push(render(INSTALL_COMPONENT_TEMPLATE, {
      name: componentName,
      component: name
    }));
  }
  
  if (['Alert', 'Confirm', 'Notification', 'Message', 'InfiniteScroll'].indexOf(componentName) === -1) {
    listTemplate.push(`  ${componentName}`);
  }
});

var template = render(MAIN_TEMPLATE, {
  include: includeComponentTemplate.join(endOfLine),
  install: installTemplate.join(',' + endOfLine),
  version: process.env.VERSION || require('../../package.json').version,
  list: listTemplate.join(',' + endOfLine)
});

fs.writeFileSync(OUTPUT_PATH, template);
console.log('[build entry] DONE:', OUTPUT_PATH);

